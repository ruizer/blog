(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{390:function(n,e,s){"use strict";s.r(e);var t=s(42),a=Object(t.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"javascript相关知识点集锦-二-typeof-与-instanceof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript相关知识点集锦-二-typeof-与-instanceof"}},[n._v("#")]),n._v(" JavaScript相关知识点集锦(二)：typeof 与 instanceof")]),n._v(" "),s("blockquote",[s("p",[n._v("本章主要分为两部分：typeof 是否能正确的判断类型、instanceof 能正确判断类型的原理")])]),n._v(" "),s("h2",{attrs:{id:"typeof-能否正确判断类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typeof-能否正确判断类型"}},[n._v("#")]),n._v(" typeof 能否正确判断类型")]),n._v(" "),s("p",[n._v("当然，"),s("code",[n._v("typeof")]),n._v(" 对于原始类型来说，除了"),s("code",[n._v("null")]),n._v("都能准备判断类型\n")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("typeof 123 // 'number'\ntypeof '123' // 'string'\ntypeof undefined // 'undefined'\ntypeof true // 'boolean'\ntypeof Symbol() // symbol\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[s("code",[n._v("typeof")]),n._v(" 对于对象来说，除了函数都会输出"),s("code",[n._v("object")]),n._v("，所以"),s("code",[n._v("typeof")]),n._v(" 并不能准确判断变量类型")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("typeof {} // 'object'\ntypeof [] // 'object'\ntypeof console.log // 'function'\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("那当我们需要准确判断对象类型时，就可以使用"),s("code",[n._v("instanceof")]),n._v("，因为其内部机制是通过原型来判断的")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function Person() {}\nconst p = new Person()\np instanceof Person // true\n\nconst str = 'hello world'\nstr instanceof String // false\n\nconst str1 = new String('hello world')\nstr1 instanceof String // true\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("p",[n._v("我们可以看到，对于原始类型"),s("code",[n._v("instanceof")]),n._v(" 并不能准确判断其类型，但是我们利用"),s("code",[n._v("Symbol.hasInstance")]),n._v("来实现")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class PrimitiveString {\n    static [Symbol.hasInstance](instance) {\n        return typeof instance === 'string'\n    }\n}\nconsole.log('hello world' instanceof PrimitiveString) // true\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance",target:"_blank",rel:"noopener noreferrer"}},[n._v("Symbol.hasInstance"),s("OutboundLink")],1),n._v(" 可以让我们自定义 "),s("code",[n._v("instanceof")]),n._v(" 操作符在某个类上的行为，\n所以 "),s("code",[n._v("'hello world' instanceof PrimitiveString")]),n._v(" 就相当于 "),s("code",[n._v("typeof 'hello world' === 'string'")])]),n._v(" "),s("h2",{attrs:{id:"instanceof-的原理是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-的原理是什么"}},[n._v("#")]),n._v(" instanceof 的原理是什么？")]),n._v(" "),s("p",[n._v("上面提到过 "),s("code",[n._v("instanceof")]),n._v(" 能够准确判断对象类型，因为其内部机制是通过判断对象的原型链中能不能找到类型的 "),s("code",[n._v("prototype")]),n._v("，\n下面是简单的实现：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function myInstanceof(left, right) {\n    let prototype = right.prototype\n    left = left.__proto__\n    while(true) {\n        if (left === null || left === undefined) {\n            return false\n        }\n        if (prototype === left) {\n            return true\n        }\n        left = left.__proto__\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("p",[n._v("大体实现思路：")]),n._v(" "),s("ul",[s("li",[n._v("首先获取类型的原型")]),n._v(" "),s("li",[n._v("然后获取对象的原型")]),n._v(" "),s("li",[n._v("然后一直循环判断类型的原型是否等于对象的原型，直到对象的原型为"),s("code",[n._v("null")])])]),n._v(" "),s("p",[n._v("本文完， 感谢阅读。")])])}),[],!1,null,null,null);e.default=a.exports}}]);
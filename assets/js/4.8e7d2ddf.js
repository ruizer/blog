(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{364:function(t,a,s){t.exports=s.p+"assets/img/load01.092e74ef.png"},365:function(t,a,s){t.exports=s.p+"assets/img/load02.d93eb5ce.png"},366:function(t,a,s){t.exports=s.p+"assets/img/sound.6f5446e5.png"},397:function(t,a,s){"use strict";s.r(a);var e=s(42),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"nginx学习-看这一篇就够了"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx学习-看这一篇就够了"}},[t._v("#")]),t._v(" nginx学习，看这一篇就够了")]),t._v(" "),e("blockquote",[e("p",[t._v("非常棒的文章，这边做个缓存，防止丢失，原文："),e("a",{attrs:{href:"https://blog.csdn.net/qq_40036754/article/details/102463099",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/qq_40036754/article/details/102463099"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"一、nginx简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、nginx简介"}},[t._v("#")]),t._v(" 一、nginx简介")]),t._v(" "),e("h3",{attrs:{id:"_1-什么是-nginx-和可以做什么事情"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是-nginx-和可以做什么事情"}},[t._v("#")]),t._v(" 1. 什么是 nginx 和可以做什么事情")]),t._v(" "),e("ul",[e("li",[t._v("Nginx 是高性能的 HTTP 和反向代理的web服务器，处理高并发能力是十分强大的，能经受高负 载的考验,有报告表明能支持高达 50,000 个并发连接数。")]),t._v(" "),e("li",[t._v("其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。")])]),t._v(" "),e("h3",{attrs:{id:"_2-nginx-作为-web-服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-nginx-作为-web-服务器"}},[t._v("#")]),t._v(" 2.Nginx 作为 web 服务器")]),t._v(" "),e("ul",[e("li",[t._v("Nginx 可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl、php 等。但是不支持 java。Java 程序只能通过与 tomcat 配合完成。Nginx 专为性能优化而开发， 性能是其最重要的考量,实现上非常注重效率 ，能经受高负载的考验,有报告表明能支持高 达 50,000 个并发连接数。")])]),t._v(" "),e("p",[t._v("https://lnmp.org/nginx.html")]),t._v(" "),e("h3",{attrs:{id:"_3-正向代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-正向代理"}},[t._v("#")]),t._v(" 3. 正向代理")]),t._v(" "),e("p",[t._v("Nginx 不仅可以做反向代理，实现负载均衡。还能用作正向代理来进行上网等功能。 "),e("strong",[t._v("正向代理：如果把局域网外的 Internet 想象成一个巨大的资源库，则局域网中的客户端要访 问 Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理。")])]),t._v(" "),e("ul",[e("li",[t._v("简单一点：通过代理服务器来访问服务器的过程 就叫 正向代理。")]),t._v(" "),e("li",[t._v("需要在客户端配置代理服务器进行指定网站访问")])]),t._v(" "),e("h3",{attrs:{id:"_4-反向代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-反向代理"}},[t._v("#")]),t._v(" 4. 反向代理")]),t._v(" "),e("ul",[e("li",[t._v("反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问。")]),t._v(" "),e("li",[t._v("我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器"),e("code",[t._v("IP")]),t._v("地址。")])]),t._v(" "),e("h3",{attrs:{id:"_5-负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-负载均衡"}},[t._v("#")]),t._v(" 5. 负载均衡")]),t._v(" "),e("ul",[e("li",[t._v("增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的 情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的"),e("code",[t._v("负载均衡")])]),t._v(" "),e("li",[t._v("客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服务器处理完毕后，再将结果返回给客户端。")])]),t._v(" "),e("p",[t._v("这种架构模式对于早期的系统相对单一，并发请求相对较少的情况下是比较适合的，成本也低。但是随着信息数量的不断增长，访问量和数据量的飞速增长，以及系统业务的复杂度增加，这种架构会造成服务器相应客户端的请求日益缓慢，并发量特别大的时候，还容易造成服务器直接崩溃。很明显这是由于服务器性能的瓶颈造成的问题，那么如何解决这种情况呢？")]),t._v(" "),e("p",[t._v("我们首先想到的可能是升级服务器的配置，比如提高"),e("code",[t._v("CPU")]),t._v("执行频率，加大内存等提高机器的物理性能来解决此问题，但是我们知道摩尔定律的日益失效，硬件的性能提升已经不能满足日益提升的需求了。最明显的一个例子，天猫双十一当天，某个热销商品的瞬时访问量是极其庞大的，那么类似上面的系统架构，将机器都增加到现有的顶级物理配置，都是不能够满足需求的。那么怎么办呢？上面的分析我们去掉了增加服务器物理配置来解决问题的办法，也就是说纵向解决问题的办法行不通了，那么横向增加服务器的数量呢？这时候集群的概念产生了，单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的"),e("code",[t._v("负载均衡")]),t._v("。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(364),alt:"image"}}),t._v(" "),e("img",{attrs:{src:s(365),alt:"image"}})]),t._v(" "),e("h3",{attrs:{id:"_6-动静分离"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-动静分离"}},[t._v("#")]),t._v(" 6.动静分离")]),t._v(" "),e("p",[t._v("为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(366),alt:"image"}})]),t._v(" "),e("h2",{attrs:{id:"二、nginx-的安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、nginx-的安装"}},[t._v("#")]),t._v(" 二、Nginx 的安装")]),t._v(" "),e("blockquote",[e("p",[t._v("不同系统安装方式不一样，并不复杂。")])]),t._v(" "),e("h3",{attrs:{id:"防火墙问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#防火墙问题"}},[t._v("#")]),t._v(" 防火墙问题")])])}),[],!1,null,null,null);a.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{357:function(s,t,e){s.exports=e.p+"assets/img/xlsx1.d4b094a1.png"},358:function(s,t,e){s.exports=e.p+"assets/img/xlsx2.653ac238.png"},390:function(s,t,e){"use strict";e.r(t);var a=e(42),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"真实业务系列-在浏览器中使用-js-xlsx-实现纯前端解析excel文件-实现批量导入功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#真实业务系列-在浏览器中使用-js-xlsx-实现纯前端解析excel文件-实现批量导入功能"}},[s._v("#")]),s._v(" 真实业务系列：在浏览器中使用 js-xlsx ，实现纯前端解析Excel文件，实现批量导入功能")]),s._v(" "),a("blockquote",[a("p",[s._v("博客好久之前就已经搭建好了，但是一直没有写任何东西。这样不行啊，还是要逼自己一把。写什么呢？这是个非常头疼的事情，一来没什么文笔，二来自身技术底蕴略有不足。思前考后，最终在整理笔记的时候决定先弄个 "),a("strong",[s._v("真实业务系列")]),s._v("，比如 js-xlsx 实现批量导入功能、JS 生成颜色渐变等")])]),s._v(" "),a("h1",{attrs:{id:"为什么要用-js-xlsx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用-js-xlsx"}},[s._v("#")]),s._v(" 为什么要用 js-xlsx")]),s._v(" "),a("ol",[a("li",[s._v("实际开发中，经常会遇到批量导入（导入 Excel）的功能，特别是后台管理系统；")]),s._v(" "),a("li",[s._v("js-xlsx 是由"),a("a",{attrs:{href:"https://sheetjs.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("SheetJS"),a("OutboundLink")],1),s._v("出品的一款非常方便、多格式支持、纯 JS 且兼容性强的解析和导出工具库，能同时运行在浏览器端和服务器端，本文都是以浏览器端为例；")])]),s._v(" "),a("h1",{attrs:{id:"如何使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何使用"}},[s._v("#")]),s._v(" 如何使用")]),s._v(" "),a("blockquote",[a("ul",[a("li",[s._v("官方 GitHub：https://github.com/SheetJS/js-xlsx")]),s._v(" "),a("li",[s._v("本文配套 Demo：https://ruizer.github.io/demo/#/xlsx")])])]),s._v(" "),a("p",[s._v("在浏览器中，只需要添加 script 脚本（官方 GitHub 上即可下载）：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<script type="text/javascript" src="dist/xlsx.full.min.js"><\/script>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("table",[a("thead",[a("tr",[a("th",[s._v("CND")]),s._v(" "),a("th",[s._v("网址")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("unpkg")]),s._v(" "),a("td",[s._v("https://unpkg.com/xlsx/")])]),s._v(" "),a("tr",[a("td",[s._v("jsDelivr")]),s._v(" "),a("td",[s._v("https://jsdelivr.com/package/npm/xlsx")])]),s._v(" "),a("tr",[a("td",[s._v("CDNjs")]),s._v(" "),a("td",[s._v("http://cdnjs.com/libraries/xlsx")])]),s._v(" "),a("tr",[a("td",[s._v("packd")]),s._v(" "),a("td",[s._v("https://bundle.run/xlsx@latest?name=XLSX")])])])]),s._v(" "),a("p",[s._v("当然也可以用==npm==、==bower==")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm install xlsx\nbower install js-xlsx\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h1",{attrs:{id:"解析-excel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析-excel"}},[s._v("#")]),s._v(" 解析 Excel")]),s._v(" "),a("p",[s._v("浏览器端解析 Excel 主要是通过 XLSX.read(data,read_opts)来实现，返回一个 WorkBook 对象，然后对 WorkBook 对象进行处理；\nread_opts 参数：type、raw、codepage 等，具体可见"),a("a",{attrs:{href:"https://github.com/SheetJS/js-xlsx#parsing-options",target:"_blank",rel:"noopener noreferrer"}},[s._v("options"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("type 为读取方式：")]),s._v(" "),a("blockquote",[a("ul",[a("li",[s._v("base64：base64 编码")]),s._v(" "),a("li",[s._v("binary：二进制字符串")]),s._v(" "),a("li",[s._v("string：JS 字符串")]),s._v(" "),a("li",[s._v("buffer：nodejs Buffer")]),s._v(" "),a("li",[s._v("array：8 位无符号整数数组")]),s._v(" "),a("li",[s._v("file：将读取的文件的路径（仅限 nodejs）")])])]),s._v(" "),a("h2",{attrs:{id:"获取-workbook-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取-workbook-对象"}},[s._v("#")]),s._v(" 获取 WorkBook 对象")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\n// 读取本地文件\nreadFileForWorkbook(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        let wb;\n        reader.onload = res => {\n          const data = res.target.result;\n          wb = XLSX.read(data, {\n            type: "binary"\n          });\n          resolve(wb);\n        };\n        reader.onerror = e => {\n          reject(e);\n        };\n        reader.readAsBinaryString(file);\n     });\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h2",{attrs:{id:"使用-workbook-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-workbook-对象"}},[s._v("#")]),s._v(" 使用 WorkBook 对象")]),s._v(" "),a("h3",{attrs:{id:"workbook-对象里面到底有什么呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workbook-对象里面到底有什么呢"}},[s._v("#")]),s._v(" WorkBook 对象里面到底有什么呢")]),s._v(" "),a("p",[a("img",{attrs:{src:e(357),alt:"image"}}),s._v("\n可以看到 Excel 所有信息，我们主要使用 SheetNames、Sheets 对象；\nSheetNames：包含所有的 Sheet 名字\nSheets：保存每个 sheet 的具体内容，每个 sheet 又是通过 A1 等键值保存每个单元格的内容\n"),a("img",{attrs:{src:e(358),alt:"image"}})]),s._v(" "),a("h3",{attrs:{id:"读取-workbook-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读取-workbook-对象"}},[s._v("#")]),s._v(" 读取 WorkBook 对象")]),s._v(" "),a("h4",{attrs:{id:"主要的辅助函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要的辅助函数"}},[s._v("#")]),s._v(" 主要的辅助函数")]),s._v(" "),a("blockquote",[a("ul",[a("li",[s._v("XLSX.utils.sheet_to_csv：生成 CSV")]),s._v(" "),a("li",[s._v("XLSX.utils.sheet_to_html：生成 HTML")]),s._v(" "),a("li",[s._v("XLSX.utils.sheet_to_json: 生成一个对象数组")]),s._v(" "),a("li",[s._v("XLSX.utils.sheet_to_txt：生成 UTF16 格式化文本")]),s._v(" "),a("li",[s._v("XLSX.utils.sheet_to_formulae：生成公式列表")])])]),s._v(" "),a("p",[s._v("一般使用 sheet_to_csv、sheet_to_html、sheet_to_json 这三种，to_csv 会忽略格式等信息; to_html 会保留格式，但生成的是html而不是table，有定制化需求的时候可能不太适合；使用 to_json 就能实现批量导入功能了，转成 JSON 数组传个后台")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 根据不同类型处理work对象\nanalysisWorkbook(type) {\n    let list = [];\n    let fun = null;\n    switch (type) {\n        case "csv":\n          fun = XLSX.utils.sheet_to_csv;\n          break;\n        case "txt":\n          fun = XLSX.utils.sheet_to_txt;\n          break;\n        case "html":\n          fun = XLSX.utils.sheet_to_html;\n          break;\n        case "formulae":\n          fun = XLSX.utils.sheet_to_formulae;\n          break;\n        default:\n          fun = XLSX.utils.sheet_to_json;\n          break;\n    }\n    this.workbook.SheetNames.forEach(sheet => {\n        const ref = this.workbook.Sheets[sheet]["!ref"];\n        if (ref) {\n          list = list.concat(fun(this.workbook.Sheets[sheet]));\n        }\n    });\n    return list;\n},\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),s._v(" "),a("p",[s._v("本文完， 感谢阅读。")])])}),[],!1,null,null,null);t.default=n.exports}}]);